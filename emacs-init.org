* interface tweaks
  #+BEGIN_SRC emacs-lisp

  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)

  #+END_SRC
* try
  #+BEGIN_SRC emacs-lisp

  (use-package try
  :ensure t)

  #+END_SRC
* which-key
  #+BEGIN_SRC emacs-lisp

  (use-package which-key
  :ensure t 
  :config
  (which-key-mode))

  #+END_SRC
* org-mode
  #+BEGIN_SRC emacs-lisp

  (use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  #+END_SRC
* ace windows for easy switching
  #+BEGIN_SRC emacs-lisp

;;  (use-package ace-window
;;  :ensure t
;;  :init
;;  (progn
;;  (setq aw-scope 'frame)
;;  (global-set-key (kbd "C-x O") 'other-frame)
;;  (global-set-key [remap other-window] 'ace-window)
;;  (custom-set-faces
;;   '(aw-leading-char-face
;;     ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
;;  ))

  #+END_SRC
* swiper / ivy /counsel
  #+BEGIN_SRC emacs-lisp

  (use-package counsel
  :ensure t
  :bind
  (("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line)))




  (use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "%d/%d ")
  (setq ivy-display-style 'fancy))


  (use-package swiper
  :ensure t
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))

  #+END_SRC
* auto-complete
  #+BEGIN_SRC emacs-lisp

  ;;Auto completion
  (use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))

  #+END_SRC
* misc
  #+BEGIN_SRC emacs-lisp

  (setq inhibit-startup-message t)

  (tool-bar-mode -1)

  ;;c-style
  (setq c-default-style "linux"
                c-basic-offset 4)

  ;;keyboard setting
  (global-unset-key (kbd "C-SPC"))
  (global-set-key (kbd "M-SPC") 'set-mark-command)

  ;;blink-cursor
  ; Highlights the current cursor line
  (global-hl-line-mode t)

  ;; flashes the cursor's line when you scroll
  (use-package beacon
  :ensure t
  :config
  (beacon-mode 1)
  ;; (setq beacon-color "#666600")
  )

  #+END_SRC
* tags for code navigation
  #+BEGIN_SRC emacs-lisp

  ;;tags for code navigation
  (use-package ggtags
	     :ensure t
	     :config
	     (add-hook 'c-mode-common-hook
		       (lambda ()
			 (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
			   (ggtags-mode 1))))
	     )

  #+END_SRC
* flycheck
  #+BEGIN_SRC emacs-lisp

  ;; on the fly syntax checking
  (use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))

  #+END_SRC
* yasinppet
  #+BEGIN_SRC emacs-lisp

  ;; snippets and snippet expansion
  (use-package yasnippet
  :ensure t
  :init
  (yas-global-mode 1))

  #+END_SRC
  
* auto-yasnippet
  #+BEGIN_SRC emacs-lisp

  (use-package auto-yasnippet
  :ensure t)

  #+END_SRC
* ibuffer
  #+BEGIN_SRC emacs-lisp

  ;;make ibuffer default
  (defalias 'list-buffers 'ibuffer)

  #+END_SRC
* undo-tree
  #+BEGIN_SRC emacs-lisp

  (use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode))

  #+END_SRC
* PDF tools
  #+BEGIN_SRC emacs-lisp

  (use-package pdf-tools
  :ensure t
  :config
  (pdf-tools-install)
  )

  (use-package org-pdfview
  :ensure t)

  (require 'pdf-tools)
  (require 'org-pdfview)

  #+END_SRC
* iedit and narrow / widen dwim
  #+BEGIN_SRC emacs-lisp

  ; mark and edit all copies of the marked region simultaniously. 
  (use-package iedit
  :ensure t)

  ; if you're windened, narrow to the region, if you're narrowed, widen
  ; bound to C-x n
  (defun narrow-or-widen-dwim (p)
  "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
  Intelligently means: region, org-src-block, org-subtree, or defun,
  whichever applies first.
  Narrowing to org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer is already
  narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
  ((region-active-p)
  (narrow-to-region (region-beginning) (region-end)))
  ((derived-mode-p 'org-mode)
  ;; `org-edit-src-code' is not a real narrowing command.
  ;; Remove this first conditional if you don't want it.
  (cond ((ignore-errors (org-edit-src-code))
  (delete-other-windows))
  ((org-at-block-p)
  (org-narrow-to-block))
  (t (org-narrow-to-subtree))))
  (t (narrow-to-defun))))

  ;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
  ;; This line actually replaces Emacs' entire narrowing keymap, that's
  ;; how much I like this command. Only copy it if that's what you want.
  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)

  #+END_SRC
* Wgrep
  #+BEGIN_SRC emacs-lisp

  (use-package wgrep
  :ensure t
  )
  (use-package wgrep-ag
  :ensure t
  )
  (require 'wgrep-ag)

  #+END_SRC
* python
  #+BEGIN_SRC emacs-lisp
  
  (setq py-python-command "python3")
  (setq python-shell-interpreter "python3")
 

  (use-package elpy
    :ensure t
    :config 
    (elpy-enable))

  (use-package virtualenvwrapper
  :ensure t
  :config
  (venv-initialize-interactive-shells)
  (venv-initialize-eshell))

  #+END_SRC
* hydra
  #+BEGIN_SRC emacs-lisp

  (use-package hydra 
    :ensure hydra
    :init 
    (global-set-key
    (kbd "C-x t")
	    (defhydra toggle (:color blue)
	      "toggle"
	      ("a" abbrev-mode "abbrev")
	      ("s" flyspell-mode "flyspell")
	      ("d" toggle-debug-on-error "debug")
	      ("c" fci-mode "fCi")
	      ("f" auto-fill-mode "fill")
	      ("t" toggle-truncate-lines "truncate")
	      ("w" whitespace-mode "whitespace")
	      ("q" nil "cancel")))
    (global-set-key
     (kbd "C-x j")
     (defhydra gotoline 
       ( :pre (linum-mode 1)
	      :post (linum-mode -1))
       "goto"
       ("t" (lambda () (interactive)(move-to-window-line-top-bottom 0)) "top")
       ("b" (lambda () (interactive)(move-to-window-line-top-bottom -1)) "bottom")
       ("m" (lambda () (interactive)(move-to-window-line-top-bottom)) "middle")
       ("e" (lambda () (interactive)(end-of-buffer)) "end")
       ("c" recenter-top-bottom "recenter")
       ("n" next-line "down")
       ("p" (lambda () (interactive) (forward-line -1))  "up")
       ("g" goto-line "goto-line")
       ))
    (global-set-key
     (kbd "C-c t")
     (defhydra hydra-global-org (:color blue)
       "Org"
       ("t" org-timer-start "Start Timer")
       ("s" org-timer-stop "Stop Timer")
       ("r" org-timer-set-timer "Set Timer") ; This one requires you be in an orgmode doc, as it sets the timer for the header
       ("p" org-timer "Print Timer") ; output timer value to buffer
       ("w" (org-clock-in '(4)) "Clock-In") ; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)
       ("o" org-clock-out "Clock-Out") ; you might also want (setq org-log-note-clock-out t)
       ("j" org-clock-goto "Clock Goto") ; global visit the clocked task
       ("c" org-capture "Capture") ; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html
	     ("l" (or )rg-capture-goto-last-stored "Last Capture"))

     ))

(defhydra multiple-cursors-hydra (:hint nil)
  "
     ^Up^            ^Down^        ^Other^
----------------------------------------------
[_p_]   Next    [_n_]   Next    [_l_] Edit lines
[_P_]   Skip    [_N_]   Skip    [_a_] Mark all
[_M-p_] Unmark  [_M-n_] Unmark  [_r_] Mark by regexp
^ ^             ^ ^             [_q_] Quit
"
  ("l" mc/edit-lines :exit t)
  ("a" mc/mark-all-like-this :exit t)
  ("n" mc/mark-next-like-this)
  ("N" mc/skip-to-next-like-this)
  ("M-n" mc/unmark-next-like-this)
  ("p" mc/mark-previous-like-this)
  ("P" mc/skip-to-previous-like-this)
  ("M-p" mc/unmark-previous-like-this)
  ("r" mc/mark-all-in-region-regexp :exit t)
  ("q" nil)

  ("<mouse-1>" mc/add-cursor-on-click)
  ("<down-mouse-1>" ignore)
  ("<drag-mouse-1>" ignore))

  #+END_SRC
* git
  #+BEGIN_SRC emacs-lisp

  (use-package magit
  :ensure t
  :init
  (progn
  (bind-key "C-x g" 'magit-status)
  ))

  (use-package git-gutter
  :ensure t
  :init
  (global-git-gutter-mode +1))

  (global-set-key (kbd "M-g M-g") 'hydra-git-gutter/body)


  (use-package git-timemachine
  :ensure t
  )
(defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
                            :hint nil)
  "
Git gutter:
  _j_: next hunk        _s_tage hunk     _q_uit
  _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
  ^ ^                   _p_opup hunk
  _h_: first hunk
  _l_: last hunk        set start _R_evision
"
  ("j" git-gutter:next-hunk)
  ("k" git-gutter:previous-hunk)
  ("h" (progn (goto-char (point-min))
              (git-gutter:next-hunk 1)))
  ("l" (progn (goto-char (point-min))
              (git-gutter:previous-hunk 1)))
  ("s" git-gutter:stage-hunk)
  ("r" git-gutter:revert-hunk)
  ("p" git-gutter:popup-hunk)
  ("R" git-gutter:set-start-revision)
  ("q" nil :color blue)
  ("Q" (progn (git-gutter-mode -1)
              ;; git-gutter-fringe doesn't seem to
              ;; clear the markup right away
              (sit-for 0.1)
              (git-gutter:clear))
       :color blue))

  #+END_SRC
* temp
  #+BEGIN_SRC emacs-lisp



  #+END_SRC
